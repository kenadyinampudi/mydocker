====== BTRFS Full Filesystem ======

BTRFS uses a single volume to contain everything.  By default, this has no limits placed on any particular filesystem.

To put sane roadblocks on things to make the system a little safer, quotas should be enabled.
This will act similar to the LVM filesystems, limiting a subvolume to a certain size.
  
  
  btrfs qgroup show /

In general, everything is shoved into the / subvolume.
To enable a quota, use the limit command.
  btrfs qgroup limit 1G /home
  
Where "1G" is the total size desired and "/home" is the subvolume to be limited.

Standard sizes are:
  btrfs qgroup limit 5G /home
  btrfs qgroup limit 2G /opt
  btrfs qgroup limit 4G /tmp
  btrfs qgroup limit 3G /var/log
  btrfs qgroup limit 2G /var/spool

To check the used size of everything, try the following script to be saved as "btrfs-du"
<code>
#!/bin/bash

#
# Script that outputs the filesystem usage of snapshots in a location ( root if omited )
#
# Usage:
#          sudo btrfs-du ( path )
#
# Copyleft 2017 by Ignacio Nunez Hernanz <nacho _a_t_ ownyourbits _d_o_t_ com>
# GPL licensed (see end of file) * Use at your own risk!
#
# Based on btrfs-size by Kyle Agronick
#
# More at https://ownyourbits.com/2017/12/06/check-disk-space-of-your-btrfs-snapshots-with-btrfs-du/
#

LOCATION=${1:-/}

# checks
[[ ${EUID} -ne 0 ]] && {
  printf "Must be run as root. Try 'sudo $( basename "$0" )'\n"
  exit 1
}

[[ -d "$LOCATION" ]] || {
  echo "$LOCATION not found"
  exit 1
}

[[ "$( stat -fc%T "$LOCATION" )" != "btrfs" ]] && {
  echo "$LOCATION is not in a BTRFS system"
  exit 1
}

# quota management
sync
btrfs qgroup show "$LOCATION" 2>&1 | grep -q "quotas not enabled" && {
  QFLAG=1
  btrfs quota enable "$LOCATION"
}

# if we just enabled quota, might have to wait for rescan
OUT=$( btrfs qgroup show --si --sort=qgroupid "$LOCATION" 2>&1 )
grep -q -e "rescan is running" -e "data inconsistent" <<< "$OUT" && {
  echo "INFO: Quota is disabled. Waiting for rescan to finish ..."
  while true; do
    sleep 2
    OUT=$( btrfs qgroup show --si --sort=qgroupid "$LOCATION" 2>&1 )
    grep -q -e "rescan is running" -e "data inconsistent" <<< "$OUT" || break
  done
}

# data
declare -A TOT EXCL NAME

## qgroup data
OUT=$( sed '1,3d;s|^.*/||' <<< "$OUT" )
ID__=( $( awk '{ print $1 }' <<< "$OUT" ) )
TOT_=( $( awk '{ print $2 }' <<< "$OUT" ) )
EXC_=( $( awk '{ print $3 }' <<< "$OUT" ) )

for (( i = 0 ; i < ${#ID__[@]} ; i++ )); do
  TOT[${ID__[$i]}]=${TOT_[$i]}
  EXC[${ID__[$i]}]=${EXC_[$i]}
done

## naming data
OUT=$( btrfs subvolume list --sort=rootid "$LOCATION" | cut -d ' ' -f 2,9 )
ID__=( $( awk '{ print $1 }' <<< "$OUT" ) )
NAM_=( $( awk '{ print $2 }' <<< "$OUT" ) )

for (( i = 0 ; i < ${#ID__[@]} ; i++ )); do
  NAME[${ID__[$i]}]=${NAM_[$i]}
done

EXCL_RAW=( $( btrfs qgroup show --raw "$LOCATION" | sed '1,2d' | awk '{  print $3 }' ) )
EXCL_TOTAL=0

[[ "$QFLAG" == "1" ]] && btrfs quota disable "$LOCATION"

# output
printf "%-60s %-10s %-10s %-10s\n" "Subvolume" "Total" "Exclusive" "ID"
printf "─────────────────────────────────────────────────────────────────────────────────────────\n"

## matching by IDs in btrfs subvolume list
for (( i = 0 ; i < ${#ID__[@]} ; i++ )); do
  printf "%-60s %-10s %-10s %-10s\n" ${NAME[${ID__[$i]}]} ${TOT[${ID__[$i]}]} ${EXC[${ID__[$i]}]} ${ID__[$i]}
  EXCL_TOTAL=$(( EXCL_TOTAL + ${EXCL_RAW[$i]} ))
done

EXCL_TOTAL=$( awk '{ sum=$1 ; hum[1024^4]="TB";hum[1024^3]="GB";hum[1024^2]="MB";hum[1024]="KB";
              for (x=1024^4; x>=1024; x/=1024){ if (sum>=x) { printf "%.2f%s\n",sum/x,hum[x];break } }}' \
              <<< "$EXCL_TOTAL" )

printf "─────────────────────────────────────────────────────────────────────────────────────────\n"
printf "%86s\n" "Total exclusive data: $EXCL_TOTAL"

prettyname=`hostname`
OUT=$( btrfs subvolume list --sort=rootid / | cut -d ' ' -f 2,9 )
btrfs qgroup show -r --raw '/' | tail --lines +3 | grep -v 'none' | while read btrfs_output;
do
        ID__=( $( awk '{ print $1 }' <<< "$OUT" ) )
        NAM_=( $( awk '{ print $2 }' <<< "$OUT" ) )

        ## naming data
        for (( i = 0 ; i < ${#ID__[@]} ; i++ )); do
                NAME[${ID__[$i]}]=${NAM_[$i]}
        done
        echo $btrfs_output | gawk '{printf "%s %.2d\n", $1, (($3/$4)*100)}' | while read mypercentage;
        do
                perc=$(echo $mypercentage | gawk '{print $2}')
                filesystem=$(echo $mypercentage | gawk '{print $1}' | sed 's|^.*/||')
                echo "${NAME[$filesystem]} quota usage is now $perc% on $prettyname"
        done
#fi
done

echo "Extend a quota with 'btrfs qgroup limit 1G /home', where '1G' is the total size desired and '/home' is the subvolume listed above."

# License
#
# This script is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This script is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this script; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place, Suite 330,
# Boston, MA  02111-1307  USA

</code>
