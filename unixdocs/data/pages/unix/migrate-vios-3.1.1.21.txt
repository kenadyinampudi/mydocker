====== Migrating VIOS Servers to VIOS V3.1 ======
** They were developed at Tenneco with the on site assitnace of Dave Buffaline, Senior Managing Consultant Virtualization, Performance, & Technology Integration IBM as best practice VIOS upgrade proceedures, and are based on the replacement theory of upgrade. That is the VIOS is replaced with a complete server image instead of being upgrades with individual patch levels.** 

** This is specifically designed for "new" VIOS installations and the upgrade of vacated hadrware VIOS servers that contain no functioning VIOS client lpars. **

** PRE UPGRADE PROCESS STARTS HERE **

  - Log in to the VIOS as the user padmin.  
  - Commit previous updates, by running the updateios command. <code>updateios -commit </code>
  - Verify no maps are in place. <code> lsmap -all </code>
  - Exit thte restricted shell <code> oem_setup_env </code> <code> set -o vi </code> 
  - Export the hostname <code> export hostname=$(uname -n)</code>
  - Change to the /usrlocal/sbin directory <code> cd /usr/local/sbin </code>
  - Run the checkit script to check VIOS recomended Adapter settings. <code> ./checkit </code> The last line of the output should be similiar to the following.  <code> cdcvilpv102 - CHECKIT completed without issue on Mon Dec 10 11:07:36 CST 2018 </code> If there are any recomendatains run the setit script to correct the settings <code> ./setit </code> Reexecute the checkit script to comdirm that all settings have been updated. 
  - Execute the following script to get the boot disk information. Make a note/save it, you will need later in the installation process. <code> ./get-bootdisk.sh </code> The output will look simiiar to this <code>uname -a
***************************************
AIX cdcvilpv102 1 6 0002C6FAD400

BOOT Disk
***************************************
hdisk1
hdisk1          0002c6fa2fdebd4f                    rootvg          active
U78A5.001.WIH27C3-P1-C7-L1-T2-W500601653EE01288-L0 </code> This is also captured in the snap output below. It is easier to have it readily available instead of looking it up.
  - Run the pre_upgrade_snapit.sh command.  This creates a "snap" of the VIOS server. <code> ./pre_upgrade_snapit.sh </code> The output will be in tHe /usr/local/logs directory and will be in the format Pre_upgrade-{host name}-snapit.   
  - Create a backup of the VIOS infrastructure. This will be used to restore the network etc. after the upgrade. <code> ./pre_upgrade_viosbr.sh </code> The output will be in the /home/padmin/cfgbackups directory and will be in the format Pre_upgrade-{host name}-viosbr.tar.gz
  - Verify the viosbr was successfully completed<code> /usr/ios/cli/ioscli viosbr -view -file /home/padmin/cfgbackups/Pre_upgrade-$(hostname)-viosbr.tar.gz </code>
  - Follow the standard AIX preupgrade steps.
  - [[chris:backupconfig|Perform the configuration backup]]
Log on to the NIM server so we can copy the confituration files to the repository for use later in the upgrade to put the server back together again
  - export the host name <code> export host2patch={host name of server being patched}</code>
  - copy the  snap and viodbr files to the repository. You will need to copy the viosbr output back to the system being upgraded after the upgrade has completed. Adjust the following command accordingly. <code> sudo scp ${host2patch}:/usr/local/logs/Pre_upgrade-${host2patch}-snapit /preupgrade/reports/Pre_upgrade-${host2patch}-snapit </code> <code>sudo scp ${host2patch}:/home/padmin/cfgbackups/Pre_upgrade-${host2patch}-viosbr.tar.gz /preupgrade/reports/Pre_upgrade-${host2patch}-viosbr.tar.gz </code>
 

** UPGRADE PROCESS STARTS HERE **

  - logon to the server being patched as the user padmin.
  - Exit thte restricted shell <code> oem_setup_env </code> <code> set -o vi </code> 
  - Change to the /usrlocal/sbin directory <code> cd /usr/local/sbin </code>
  - Check and clear any errors in the error report <code> errpt </code> If there are errors then clean them <code> errclear 00 </code>
  - Note the adapter that has the server ip address assigned to it. <code> ifconfig -a </code> Output should resemble the following <code>cdcvilpv102[/home/padmin] ># ifconfig -a
en4: flags=1e084863,15c0<UP,BROADCAST,NOTRAILERS,RUNNING,SIMPLEX,MULTICAST,GROUP                                                                 RT,64BIT,CHECKSUM_OFFLOAD(ACTIVE),LARGESEND,CHAIN>
        inet 10.0.4.210 netmask 0xfffffc00 broadcast 10.0.7.255
         tcp_sendspace 262144 tcp_recvspace 262144 rfc1323 1
lo0: flags=e08084b,1c0<UP,BROADCAST,LOOPBACK,RUNNING,SIMPLEX,MULTICAST,GROUPRT,6                                                                 4BIT,LARGESEND,CHAIN>
        inet 127.0.0.1 netmask 0xff000000 broadcast 127.255.255.255
        inet6 ::1%1/0
         tcp_sendspace 131072 tcp_recvspace 131072 rfc1323 1</code>
  - Check SEA adapter and put it into backup mode <code> export SEA=$(/usr/ios/cli/ioscli lsdev -virtual -field name description | awk '$2 == "Shared" && $3 == "Ethernet" && $4 == "Adapter" {print $1}' | awk -F"x0a" '{print $1}') </code><code> echo "SEA ==>> $SEA"</code><code> chdev -l ${SEA} -a ha_mode=standby </code> 
  - Verifty the SEA is in standby mode <code> lsattr -El ${SEA} | grep ha_mode </code> Output should be similiar to the following <code> ha_mode       standby     High Availability Mode</code>
  - Shutdown the VIOS server <code> shutdown </code> 

===== Configure NIM =====

  - Login to the LDC NIM server pcdcunxaxap01
  - Export a variable pointing to the VIOS server we are planning to work on<code>export host2patch=<viosserver_name></code>
  - Prepare the NIM client(VIO server) for a NIM bosinst operation<code>sudo nim -o bos_inst -a \
source=mksysb -a \
spot=vios_3_1_1_21_spot -a \
mksysb=vios_3_1_1_21_mksysb -a \
accept_licenses=yes -a \
no_client_boot=yes ${host2patch}</code>


===== Install/Upgrade VIOS using NIM =====

  -  Power on the VIOS partition to SMS. 
    - Find out the frame and HMC<code>export frame=$(grep -i ^${host2patch} /prod/images/etc/unix_sys_console | awk -F: '{print $4}' )
export hmc=$(grep -i ^${host2patch} /prod/images/etc/unix_sys_console | awk -F: '{print $3}' )</code>
    - Execute power on<code>ssh ${hmc} "chsysstate -r lpar -o on -b sms -m ${frame} -n ${host2patch}"</code>
  - Login to pgnmsv01 and open a console session to the VIO server<code>sudo getconsole $(host2patch)</code>
  - At the console, set up the server for network boot installation. Continue with the boot process. 
  - At the installation prompt select the option to select the boot disk. do not rely on the automatically chosen hdisk0 that is displayed. View the disks and select the disk that has the matching information that you saved from the get-bootdisk.sh  command in step 7 above. 
  - Once you have selected the correct disk continue with the installation. 
  - After the installation the server will reboot. login as padmn and run the followning command <code> license -accept </code> 


===== Restore the VIOS Settings - adapter mappings =====

  - Exit the restricted shell <code> oem_setup_env </code> <code> set -o vi </code>
  - Assign  the IP Address on the VIOS server to the ethernet port you noted / saved from the ifconfig -a command above.
  - Export the host name of the server being patched <code> export  host2patch=$(hostname) </code>
  - Log on to the NIM server and copy the viosbr backup you saved in the Pre_upgrade section from /preupgrade/reports/Pre_upgrade-${host2patch}-viosbr.tar.gz to the server you are upgrading <code> sudo scp /preupgrade/reports/Pre_upgrade-${host2patch}-viosbr.tar.gz ${host2patch}:/home/padmin/cfgbackups/Pre_upgrade-${host2patch}-viosbr.tar.gz </code>
  - log back on to the NIM server and copy the resolv.conf file <code>sudo scp /prod/images/etc/resolv.conf.na {Vios Server you just updated}}:/etc/resolv.conf</code>

===== Configure Networking on VIOS =====
  - Log back on to the VIOS server being patched as padmin 
  - Remove all the network configurations<code>oem_setup_env</code>detach the network config<code>ifconfig $(ifconfig -a | grep : | grep -v lo0 |grep RUNNING | awk '{print $1}' | sed "s;:;;g") down detach</code>Remove them from ODM<code>for dev in $(lsdev -Ccif | grep ^en | awk '{print $1}' | sed "s;en;;g")
do
   rmdev -dl en${dev}
   rmdev -dl et${dev}
   rmdev -dl ent${dev}
   echo "${dev} removed"
done</code>
  - Now run cfgmgr<code>cfgmgr</code>
  - Export the host name of the server being patched <code> export  host2patch=$(uname -n) </code>
  - Execute the following command <code>viosbr -restore -file /home/padmin/cfgbackups/Pre_upgrade-${host2patch}-viosbr.tar.gz </code> This creates the initial devices
  - Shutdown and restart the server <code> shutdown -force -restart </code>
  - After the reboot log back into the server as padmin
  - Export the host name of the server being patched <code> export  host2patch=$(uname -n) </code>
  - Run the viosbr resotore command again <code> viosbr -restore -file /home/padmin/cfgbackups/Pre_upgrade-${host2patch}-viosbr.tar.gz </code>  This brings in the virtual devices. 
  - Shutdown and restart the server <code> shutdown -force -restart </code>
  - After the reboot log back into the server as padmin
  - Export the host name of the server being patched <code> export  host2patch=$(uname -n) </code>
  - Run the viosbr resotore command again <code> viosbr -restore -file /home/padmin/cfgbackups/Pre_upgrade-${host2patch}-viosbr.tar.gz </code>  This brings in the remaining SEA devices 
  - Exit the restricted shell <code> oem_setup_env </code> <code> set -o vi </code> 
  - Check SEA adapter and put back into sharing mode <code> export SEA=$(/usr/ios/cli/ioscli lsdev -virtual -field name description | awk '$2 == "Shared" && $3 == "Ethernet" && $4 == "Adapter" {print $1}' | awk -F"x0a" '{print $1}') </code><code> echo "SEA ==>> $SEA"</code><code> chdev -l ${SEA} -a ha_mode=sharing </code> 
  - Verifty the SEA is in sharing mode <code> lsattr -El ${SEA} | grep ha_mode </code> Output should be similiar to the following <code> ha_mode       sharing     High Availability Mode</code>
  - Run the checkit command, it should retrun with no errors <code> /usr/local/sbin/checkit </code>
  - Set Live Partition Mobility NPIV disk Validation <code> chdev -dev vioslpm0 -attr src_lun_val=on </code>
  - [[unix:consise-cdc-vios|Final VIOS CDC Configuration Check ]]
